--- src/Nitrate_FormatWithEditorConfig/Terraria/Localization/GameCulture.cs
+++ src/Nitrate/Terraria/Localization/GameCulture.cs
@@ -1,13 +_,22 @@
+#nullable enable
+
+using System;
 using System.Collections.Generic;
 using System.Diagnostics;
 using System.Globalization;
-using System.Linq;
+
+using Terraria.Nitrate.Localization;
 
 namespace Terraria.Localization;
 
+/// <summary>
+///		Represents a language, with defined behavior for plurality and a way to
+///		textually render the language in both English and itself.
+/// </summary>
 [DebuggerDisplay("{Name}")]
 public partial class GameCulture
 {
+	[Obsolete("Avoid hard-coded vanilla CultureName, prefer string IDs")]
 	public enum CultureName
 	{
 		English = 1,
@@ -22,29 +_,45 @@
 		Unknown = 9999
 	}
 
-	private static Dictionary<CultureName, GameCulture> _NamedCultures;
-	private static Dictionary<int, GameCulture> _legacyCultures;
 	public readonly CultureInfo CultureInfo;
+
+	[Obsolete("Avoid hard-coded vanilla language IDs, preder string IDs")]
 	public readonly int LegacyId;
 
-	public static IEnumerable<GameCulture> KnownCultures => _legacyCultures.Values;
+	public static IEnumerable<GameCulture> KnownCultures => Languages.GetCultures();
 
-	public static GameCulture DefaultCulture { get; set; }
+	public static GameCulture DefaultCulture
+	{
+		get => Languages.Default;
+
+		[Obsolete("Default culture cannot be changed")]
+		set
+		{
+			// no-op
+		}
+	}
 
 	public bool IsActive => Language.ActiveCulture == this;
 
 	public string Name => CultureInfo.Name;
 
+	[Obsolete("Avoid hard-coded vanilla CultureName, prefer string IDs")]
 	public static GameCulture FromCultureName(CultureName name)
 	{
+		/*
 		if (!_NamedCultures.ContainsKey(name))
 			return DefaultCulture;
 
 		return _NamedCultures[name];
+		*/
+
+		return Languages.NAMED_CULTURES.TryGetValue(name, out var culture) ? culture : DefaultCulture;
 	}
 
+	[Obsolete("Avoid hard-coded vanilla language IDs, prefer string IDs")]
 	public static GameCulture FromLegacyId(int id)
 	{
+		/*
 		if (id < 1)
 			id = 1;
 
@@ -52,10 +_,21 @@
 			return DefaultCulture;
 
 		return _legacyCultures[id];
+		*/
+
+		if (id < 1)
+		{
+			id = 1;
+		}
+
+		return FromCultureName((CultureName)id);
 	}
 
+	/*
 	public static GameCulture FromName(string name) => _legacyCultures.Values.SingleOrDefault((GameCulture culture) => culture.Name == name) ?? DefaultCulture;
+	*/
 
+	/*
 	static GameCulture()
 	{
 		_NamedCultures = new Dictionary<CultureName, GameCulture> {
@@ -72,14 +_,21 @@
 
 		DefaultCulture = _NamedCultures[CultureName.English];
 	}
+	*/
 
+	[Obsolete("GameCulture has been reworked to define behavior, use other overload")]
 	public GameCulture(string name, int legacyId)
 	{
 		CultureInfo = new CultureInfo(name);
 		LegacyId = legacyId;
-		RegisterLegacyCulture(this, legacyId);
+		// RegisterLegacyCulture(this, legacyId);
+
+		// Nitrate: Stub these values to ensure no nulls at runtime. Not great.
+		LanguageName = EnglishName = name;
+		WorkshopName = null;
 	}
 
+	/*
 	private static void RegisterLegacyCulture(GameCulture culture, int legacyId)
 	{
 		if (_legacyCultures == null)
@@ -87,4 +_,5 @@
 
 		_legacyCultures.Add(legacyId, culture);
 	}
+	*/
 }
