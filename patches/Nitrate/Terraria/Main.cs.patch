--- src/Nitrate_Staging/Terraria/Main.cs
+++ src/Nitrate/Terraria/Main.cs
@@ -246,6 +_,7 @@
 	public static MapHeadRenderer MapPlayerRenderer = new();
 	public static NPCHeadRenderer TownNPCHeadRenderer = null;
 	public static NPCHeadRenderer BossNPCHeadRenderer = null;
+	[Obsolete("Public TitleLinkButton lists are obsolete, prefer Nitrate Version Branding API")]
 	public static List<TitleLinkButton> TitleLinks = [];
 	public static string versionNumber = "v1.4.4.9";
 	public static string versionNumber2 = "v1.4.4.9";
@@ -2652,7 +_,11 @@
 	/// Retrieves the <see cref="Player"/> object for the local user. Shorthand for <c><see cref="player"/>[<see cref="myPlayer"/>]</c>.<br/>
 	/// Many gameplay elements such as recipes, UI, TownNPC chat, and Biome logic are only executed locally, <see cref="LocalPlayer"/> is suitable for code relating to those situations. If the hook has a <see cref="Player"/> parameter, it is likely not suitable to use <see cref="LocalPlayer"/> in it.
 	/// </summary>
-	public static Player LocalPlayer => player[myPlayer];
+	public static Player LocalPlayer
+	{
+		get => player[myPlayer];
+		internal set => player[myPlayer] = value;
+	}
 
 	public static CreativeUnlocksTracker LocalPlayerCreativeTracker => player[myPlayer].creativeTracker;
 
@@ -6139,7 +_,7 @@
 		{
 			Map = new WorldMap(maxTilesX, maxTilesY);
 			Configuration.Load();
-			graphics = new GraphicsDeviceManager((object)this as Game)
+			graphics = new GraphicsDeviceManager(this)
 			{
 				/*
 	base.Content.RootDirectory = "Content";
@@ -10285,10 +_,13 @@
 		base.GraphicsDevice.DeviceLost += GraphicsDeviceLost;
 		base.GraphicsDevice.DeviceReset += GraphicsDeviceLost;
 		base.GraphicsDevice.DeviceResetting += GraphicsDeviceLost;
+
+		/*
 		if (_needsLanguageSelect)
 		{
 			menuMode = 1212;
 		}
+		*/
 
 		_achievements = new AchievementManager();
 		_achievementAdvisor = new AchievementAdvisor();
@@ -10484,6 +_,12 @@
 		CacheSupportedDisplaySizes();
 		ContentSamples.RebuildItemCreativeSortingIDsAfterRecipesAreSetUp();
 		ContentSamples.CommonlyUsedContentSamples.PrepareAfterEverythingElseLoaded();
+
+		if (_needsLanguageSelect)
+		{
+			menuMode = 888;
+			MenuUI.SetState(languageSelectMenu_InitialLanguageSelect);
+		}
 	}
 
 	private IEnumerator LoadMusic_InSteps()
@@ -48371,7 +_,7 @@
 		var text = "";
 		var num4 = 215f;
 		var startX = 0;
-		if (GameCulture.FromCultureName(GameCulture.CultureName.Russian).IsActive)
+		if (RU_RU.IsActive)
 		{
 			startX = -50;
 			num4 += 50f;
@@ -51779,7 +_,8 @@
 				if (selectedMenu == num20)
 				{
 					SoundEngine.PlaySound(10);
-					menuMode = 1213;
+					menuMode = 888;
+					MenuUI.SetState(languageSelectMenu);
 				}
 
 				// TML settings
@@ -53167,7 +_,7 @@
 
 		if (menuMode == 888)
 		{
-			if (!_blockFancyUIWhileLoading)
+			if (!_blockFancyUIWhileLoading && Assets is not null)
 			{
 				MenuUI.Draw(spriteBatch, gameTime);
 			}
@@ -54213,7 +_,7 @@
 
 	private void OnSubmitServerPassword()
 	{
-		var text = "-autoshutdown -password \"" + ConvertToSafeArgument(Netplay.ServerPassword) + "\" -lang " + Language.ActiveCulture.LegacyId;
+		var text = "-autoshutdown -password \"" + ConvertToSafeArgument(Netplay.ServerPassword) + "\" -language " + Language.ActiveCulture.CultureInfo.Name;
 		if (Platform.IsLinux)
 		{
 			text = ((IntPtr.Size != 8) ? (text + " -x86") : (text + " -x64"));
